




def CameraOpenSock(ip, port=8888):
  socket_open(ip, port, "socker_camera")
end


def CameraCloseSock():
  socket_close("socker_camera")
end


def CameraSwitchOnline():
  socket_send_string("2\r", "socker_camera")
  ret = socket_read_string("socker_camera", suffix="\r")
  if (ret == "-1"):
    popup("CameraSwitchOnline Error", title="2.5D Camera", blocking=True)
  elif (ret == ""):
    popup("CameraSwitchOnline Error | Recv Data is None", title="2.5D Camera", blocking=True)
  end
end


def CameraStartCalibrate():
  socket_send_string("3\r", "socker_camera")
  ret = socket_read_string("socker_camera", suffix="\r") 
  if (ret == "-1"):
    popup("CameraStartCalibrate Error", title="2.5D Camera", blocking=True)
  elif (ret == ""):
    popup("CameraStartCalibrate Error | Recv Data is None", title="2.5D Camera", blocking=True)
  end
end

def format03f(num):
  s = to_str(num)
  index = str_find(s, ".")
  if index != -1:
    ret = str_sub(s,0, index + 3)
    return ret
  else:
    return "rt"
  end
end

def CameraPackPose(pose):
  ret = ["", "", "", "", "", ""]
  pose[0] = pose[0] * 1000
  pose[1] = pose[1] * 1000
  pose[2] = pose[2] * 1000
  rpy = rotvec2rpy([pose[3], pose[4], pose[5]])
  ret[0] = format03f(pose[0])
  ret[1] = format03f(pose[1])
  ret[2] = format03f(pose[2])
  ret[3] = format03f(r2d(rpy[0]))
  ret[4] = format03f(r2d(rpy[1]))
  ret[5] = format03f(r2d(rpy[2]))
  i = 0
  out = ""
  while i < 6:
    out = str_cat(str_cat(out, ret[i]), ",")
    i = i + 1
  end
  
  return out
end

def CameraUnpackPose(text):
  ret = [0, 0, 0, 0, 0, 0, 0]
  i = 0
  index = 1
  while 1:
    index = str_find(text, ",")
    if index == -1:
      ret[i] = to_num(str_sub(text, 0))
    else:
      ret[i] = to_num(str_sub(text, 0, index))
    end
    text = str_sub(text, index+1)
    i=i+1
    if i > 6:
      break
    end
  end  
  return ret
end

def CameraCalibrate(pose, num):

  pose1 = CameraPackPose(pose)
  sendStr = str_cat("", pose1)
  sendStr = str_cat("4,", sendStr)
  sendStr = str_cat(sendStr, to_str(num))
  sendStr = str_cat(sendStr, "\r")
  socket_send_string(sendStr, "socker_camera")
  ret = socket_read_string("socker_camera", suffix="\r")
  if (ret == "-1"):
    popup("CameraCalibrate Error", title="2.5D Camera", blocking=True)
  elif (ret == ""):
    popup("CameraCalibrate Error | Recv Data is None", title="2.5D Camera", blocking=True)
  end
end


def CameraEndCalibrate():
  socket_send_string("5\r", "socker_camera")
  ret = socket_read_string("socker_camera", suffix="\r")
  if (ret == "-1"):
    popup("CameraEndCalibrate Error", title="2.5D Camera", blocking=True)
  elif (ret == ""):
    popup("CameraEndCalibrate Error | Recv Data is None", title="2.5D Camera", blocking=True)
  end
end


def CameraGetCalibrateResult():

  socket_send_string("6\r")
  ret = socket_read_string("socker_camera", suffix="\r")
  if (ret == "-1"):
    popup("CameraGetCalibrateResult Error", title="2.5D Camera", blocking=True)
  elif (ret == ""):
    popup("CameraGetCalibrateResult Error | Recv Data is None", title="2.5D Camera", blocking=True)
  end
end

def CameraGetMarkPose():
  socket_send_string("1\r")
  ret = socket_read_string("socker_camera", suffix="\r")
  if (ret == "-1"):
    popup("CameraGetMarkPose Error", title="2.5D Camera", blocking=True)
  elif (ret == ""):
    popup("CameraGetMarkPose Error | Recv Data is None", title="2.5D Camera", blocking=True)
  else:
    result = CameraUnpackPose(ret)
    x = result[1] / 1000
    y = result[2] / 1000
    z = result[3] / 1000
    rx = d2r(result[4])
    ry = d2r(result[5])
    rz = d2r(result[6])
    rotvec2rpy = rpy2rotvec([rx, ry, rz])
    return [x, y, z, rotvec2rpy[0], rotvec2rpy[1], rotvec2rpy[2]]
  end
end


def CameraSaveTemplate(boardPose, tool=get_actual_tcp_pose()):
  # global CameraTemplate
  CameraTemplate = pose_trans(tool, boardPose)
  return CameraTemplate
end

def CameraTrsf(t, nT, p, tool=get_actual_tcp_pose()):
  trsf = pose_trans(pose_inv(t), p)
  ret = pose_trans(nT, trsf)
  return ret
end
